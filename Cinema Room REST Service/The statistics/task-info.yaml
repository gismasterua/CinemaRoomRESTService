type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/dto/DTOWrapper.java
  visible: true
  text: |
    package cinema.dto;

    public interface DTOWrapper {
    }
  learner_created: true
- name: src/cinema/dto/Seat.java
  visible: true
  text: |
    package cinema.dto;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.Objects;

    public class Seat implements DTOWrapper{

        private int row;
        private int column;

        private int price;

        private boolean available;

        public Seat(){

        }
        public Seat(int row, int column,  int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public Seat(int row, int column,  int price, boolean available) {
            this(row, column, price);
            this.available = available;
        }

        @JsonIgnore
        public boolean isAvailable() {
            return available;
        }

        public void setAvailable(boolean available) {
            this.available = available;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Seat seat = (Seat) o;
            return row == seat.row && column == seat.column && price == seat.price;
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column, price);
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "row=" + row +
                    ", column=" + column +
                    ", price=" + price +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/dto/Purchase.java
  visible: true
  text: |
    package cinema.dto;

    import java.util.Objects;
    import java.util.UUID;

    public class Purchase implements DTOWrapper{

        private UUID token;
        private Seat ticket;

        public Purchase(){

        }

        public Purchase(UUID token, Seat ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Purchase purchase = (Purchase) o;
            return Objects.equals(token, purchase.token) && Objects.equals(ticket, purchase.ticket);
        }

        @Override
        public int hashCode() {
            return Objects.hash(token, ticket);
        }

        @Override
        public String toString() {
            return "Purchase{" +
                    "token='" + token + '\'' +
                    ", ticket=" + ticket +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/exceptions/TickedAlreadyPurchased.java
  visible: true
  text: |-
    package cinema.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class TickedAlreadyPurchased extends RuntimeException {

        public TickedAlreadyPurchased(String cause){
            super(cause);
        }
    }

    /*

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    class FlightNotFoundException extends RuntimeException {

        public FlightNotFoundException(String cause) {
            super(cause);
        }
    }
     */
  learner_created: true
- name: src/cinema/dto/Error.java
  visible: true
  text: |
    package cinema.dto;

    import java.util.Objects;

    public class Error implements DTOWrapper{

        private String error;

        public Error() {
        }

        public Error(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Error error1 = (Error) o;
            return Objects.equals(error, error1.error);
        }

        @Override
        public int hashCode() {
            return Objects.hash(error);
        }

        @Override
        public String toString() {
            return "Error{" +
                    "error='" + error + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/Config.java
  visible: true
  text: |
    package cinema;


    import cinema.dto.Cinema;
    import cinema.dto.Purchase;
    import cinema.dto.Seat;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;

    import java.util.LinkedList;
    import java.util.List;

    @Configuration
    public class Config {

        @Bean
        public Cinema allSeats(){
            Cinema cn = new Cinema();
            cn.setTotal_columns(9);
            cn.setTotal_rows(9);

            for (int i = 1; i < 10; i++){
                for (int j = 1; j < 10; j++){
                    cn.addSeat(new Seat(i, j, i <= 4 ? 10: 8, true));
                }
            }
            return cn;
        }

        @Bean
        public List<Purchase> allPurchases(){
            return new LinkedList<>();
        }
    }
  learner_created: true
- name: src/cinema/Controller.java
  visible: true
  text: |
    package cinema;

    import cinema.dto.*;
    import cinema.dto.Error;
    import cinema.exceptions.TickedAlreadyPurchased;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;
    import java.util.UUID;

    @RestController
    public class Controller {

        @Autowired
        Cinema allSeats;

        @Autowired
        List<Purchase> allPurchases;

        @GetMapping("/seats")
        public ResponseEntity<Cinema> getSeats(){
            return new ResponseEntity<>(allSeats, HttpStatus.OK);
        }

        @PostMapping("/return")
        public ResponseEntity<DTOWrapper> postReturn(@RequestBody Purchase returnPurchase){
            boolean foundState = false;
            ReturnTicket foundTicket = null;
            Purchase delRefenrce = null;

            for (Purchase purc: allPurchases) {
                if (returnPurchase.getToken().equals(purc.getToken())){

                    for (Seat s: allSeats.getAvailable_seats()) {
                        if (s.getRow() == purc.getTicket().getRow() && s.getColumn() == purc.getTicket().getColumn()) {
                            s.setAvailable(true);
                        }
                    }
                    foundState = true;
                    foundTicket = new ReturnTicket(purc.getTicket());
                    delRefenrce = purc;
                }
            }

            if (foundState){
                allPurchases.remove(delRefenrce);
                return new ResponseEntity<>(foundTicket, HttpStatus.OK);
            }
            else {
                Error error = new Error("Wrong token!");
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }

        }

        @PostMapping("/purchase")
        public ResponseEntity<DTOWrapper> postPurchase(@RequestBody Seat purchase){

            for (Seat s: allSeats.getAvailable_seats()) {
                if (s.getRow() == purchase.getRow() && s.getColumn() == purchase.getColumn()){
                    if (s.isAvailable()){
                        s.setAvailable(false);
                        UUID uuid = UUID.randomUUID();
                        Purchase purchaseTransaction = new Purchase(uuid, s);
                        allPurchases.add(purchaseTransaction);
                        return new ResponseEntity<>(purchaseTransaction, HttpStatus.OK);
                    }
                    else {
                        Error error = new Error("The ticket has been already purchased!");
                        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    //                    throw new TickedAlreadyPurchased("The ticket has been already purchased!");
    //                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST,  "The ticket has been already purchased!");
                    }

                }
            }
            Error error = new Error("The number of a row or a column is out of bounds!");
            return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    //        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
- name: src/cinema/dto/ReturnTicket.java
  visible: true
  text: |+
    package cinema.dto;

    import java.util.Objects;

    public class ReturnTicket implements DTOWrapper{

        private Seat returned_ticket;

        public ReturnTicket() {
        }

        public ReturnTicket(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public Seat getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            ReturnTicket that = (ReturnTicket) o;
            return Objects.equals(returned_ticket, that.returned_ticket);
        }

        @Override
        public int hashCode() {
            return Objects.hash(returned_ticket);
        }

        @Override
        public String toString() {
            return "ReturnTicket{" +
                    "returned_ticket=" + returned_ticket +
                    '}';
        }
    }

  learner_created: true
- name: src/cinema/dto/Cinema.java
  visible: true
  text: |
    package cinema.dto;


    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;

    public class Cinema {
        private int total_rows;
        private int total_columns;

        private List<Seat> available_seats;

        public Cinema() {
             this.available_seats = new ArrayList<>();
        }

        public void addSeat(Seat seat){
            this.available_seats.add(seat);
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Cinema cinema = (Cinema) o;
            return total_rows == cinema.total_rows && total_columns == cinema.total_columns && Objects.equals(available_seats, cinema.available_seats);
        }

        @Override
        public int hashCode() {
            return Objects.hash(total_rows, total_columns, available_seats);
        }

        @Override
        public String toString() {
            return "Cinema{" +
                    "total_rows=" + total_rows +
                    ", total_columns=" + total_columns +
                    ", available_seats=" + available_seats +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/dto/Statistic.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 15 Sep 2022 12:15:56 UTC
record: -1
